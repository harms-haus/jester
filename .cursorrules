# Jester Story Creation Framework - Cursor Rules

You are working with the Jester story creation framework, a prompt-based bedtime story generation system with LightRAG integration.

## Available Agents

Use the @ symbol to invoke Jester agents:

- @jester - 🎭 Main Entry Point & Project Manager
- @write - ✍️ Story Generation Specialist
- @muse - 💭 Creative Brainstorming Specialist
- @edit - ✏️ Content Editor & Entity Manager
- @delete - 🗑️ Deletion Specialist
- @approve - ✅ Approval Workflow Manager
- @publish - 📤 Publishing Workflow Manager
- @import - 📥 Import Workflow Manager
- @search - 🔍 Search Specialist
- @validate - 🔍 Validation Specialist

## Core Workflow

1. **@jester** - Main entry point for project management and initialization
2. **@muse** - Creative brainstorming and context generation
3. **@write** - Story generation (context → outline → story)
4. **@edit** - Content editing and entity management
5. **@validate** - Quality assurance and validation
6. **@publish** - Publishing and distribution

## Key Commands

All Jester commands start with * (asterisk):
- *help - Show available commands for current agent
- *init - Initialize project structure
- *create-new - Start new brainstorming session
- *context - Generate story context
- *outline - Generate story outline
- *story - Generate full story
- *edit - Edit content or entities

## Project Structure

- `universe/` - Global entity library (characters, locations, items)
- `reading/` - Story-specific content and patches
- `draft/` - Work-in-progress content
- `.jester/` - Framework configuration and agents
- `.memory/` - User preferences and settings


## Best Practices

1. Always start with @jester for project initialization
2. Use @muse for creative exploration and brainstorming
3. Follow the context → outline → story pipeline
4. Use @edit for content modifications
5. Validate with @validate before publishing
6. Keep entity files in universe/ for reuse across stories

## File Naming Conventions

- Stories: `{number} - {Title}.md`
- Characters: `{name}.md` (kebab-case)
- Locations: `{name}.md` (kebab-case)
- Items: `{name}.md` (kebab-case)
- DRAFT Contexts: `context-{NNN}.yaml`
- DRAFT Outlines: `outline-{NNN}.md`
- DRAFT Stories: `story-{NNN}.md`
- Contexts: `{story-title}-context.yaml`
- Outlines: `{story-title}-outline.md`
- Stories: `{story-title}-story.md`

## Agent Switching

When switching between agents, start a new chat session for optimal performance. Each agent has specialized capabilities and maintains its own context.

## Debug Mode

Use @jester *debug to activate debug mode for system introspection and troubleshooting.

Remember: Jester is designed for creating engaging bedtime stories with educational value. Focus on age-appropriate content, clear moral themes, and engaging characters.
